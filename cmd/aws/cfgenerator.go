package aws

import (
	"os"

	"github.com/spf13/cobra"
	"github.com/sumanmukherjee03/gotils/cmd/utils"
)

const (
	EC2_VPC_NAT = "ec2_vpc_nat"
)

var (
	generateCfShortDesc = "Provides cloudformation template generation capability"
	generateCfLongDesc  = `Lets you generate known cloudformation templates.
		The templates generated by this tool can help you create cloudformation stacks.`
	generateCfExample = `
	### Available commands for aws
	# gotils aws generate TEMPLATE_KIND
	gotils aws generate ec2_vpc_nat -d $(pwd)/ec2_vpc_nat.json`

	validCfTemplates = map[string]func() (string, error){
		EC2_VPC_NAT: GenEc2VpcNatCfTemplate,
	}
	dest string
)

func NewAwsCfGenerator() *cobra.Command {
	cmd := &cobra.Command{
		Use:     "generate TEMPLATE_KIND",
		Short:   generateCfShortDesc,
		Long:    generateCfLongDesc,
		Example: generateCfExample,
		Args: func(cmd *cobra.Command, args []string) error {
			if len(args) == 0 {
				return utils.RaiseCmdErr(cmd, "Kind of cf template not provided")
			}
			if len(args) > 1 {
				return utils.RaiseCmdErr(cmd, "Too many args")
			}
			if _, found := validCfTemplates[args[0]]; !found {
				return utils.RaiseCmdErr(cmd, "Wrong type of cf template provided")
			}
			return nil
		},
		TraverseChildren: true,
		Run: func(cmd *cobra.Command, args []string) {
			genTemplate(args[0])
		},
	}
	cmd.Flags().StringVarP(&dest, "dest", "d", "", "Full path to the output file")
	cmd.MarkFlagRequired("dest")
	return cmd
}

////////////////////////// Unexported funcs //////////////////////////

func genTemplate(key string) {
	data, err := validCfTemplates[key]()
	if err != nil {
		utils.CheckErr(err.Error())
	}

	f, err := os.Create(dest)
	if err != nil {
		utils.CheckErr(err.Error())
	}
	defer f.Close()

	_, err = f.Write([]byte(data))
	if err != nil {
		utils.CheckErr(err.Error())
	}
}
